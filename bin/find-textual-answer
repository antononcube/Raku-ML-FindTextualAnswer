#!/usr/bin/env raku
use v6.d;

use LLM::Functions;
use ML::FindTextualAnswer;
use JSON::Fast;

my %*SUB-MAIN-OPTS =
        :named-anywhere,
        # allow named variables at any location
        ;

#| Finding textual answers using the OpenAI API.
multi sub llm-front(Str $text,                                #= Text to be questioned.
                    Str $questions,                           #= Questions separated with '?' or ';'.
                    Str :$llm is copy = 'Whatever',           #= Large Language Model, one of 'OpenAI', 'ChatGPT', 'PaLM', 'ChatPaLM', or 'Whatever'.
                    UInt :mt(:$max-tokens) = 300,             #= The maximum number of tokens to generate in the completion.
                    Real :t(:$temperature) = 0.2,             #= Temperature.
                    Str :r(:$request) = 'Whatever',           #= Request.
                    Bool :p(:$pairs) = False,                 #= Should question-answer pairs be returned or not?
                    Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use OpenAI API.)
                    UInt :$timeout = 10,                      #= Timeout.
                    Bool :$echo = False,                      #= Should the query, result, answer be echoed or not?
                    Str :f(:$format) is copy = 'values',      #= Format of the result; one of "json", "hash", "values", or "Whatever".
                    Str :$method is copy = 'tiny',            #= Method for the HTTP POST query; one of "tiny" or "curl".
                    ) {

    if $text.chars == 0 {
        note 'Nothing.';
        return;
    }

    if $auth-key eq 'Whatever' && $llm eq 'openai' {
        if %*ENV<OPENAI_API_KEY>:exists {
            $auth-key = %*ENV<OPENAI_API_KEY>;
        } else {
            note 'Cannot find OpenAI authorization key. ' ~
                    'Please provide a valid key to the argument auth-key, or set the ENV variable OPENAI_API_KEY.';
            $auth-key = ''
        }
    }

    if $auth-key eq 'Whatever' && $llm eq 'palm' {
        if %*ENV<PALM_API_KEY>:exists {
            $auth-key = %*ENV<PALM_API_KEY>;
        } else {
            note 'Cannot find PaLM authorization key. ' ~
                    'Please provide a valid key to the argument auth-key, or set the ENV variable PALM_API_KEY.';
            $auth-key = ''
        }
    }

    if $llm.lc ∈ <chatgpt whatever> { $llm = 'openai'; }

    if $format.lc ∈ <v auto whatever> { $format = 'values'; }

    my $llmEvlr =
            llm-evaluator($llm,
                    :$max-tokens,
                    :$temperature,
                    :$auth-key,
                    :$timeout,
                    :$echo,
                    :$format,
                    :$method);

    my @qs = $questions.split(/ <?after '?'> | ';' /, :skip-empty)>>.trim;
    my $res =
            find-textual-answer($text, @qs,
                    finder => $llmEvlr,
                    request => $request eq 'Whatever' ?? Whatever !! $request,
                    :$pairs);

    given $format.lc {
        when $_ ∈ <hash raku> { say $res.raku; }
        when $_ ∈ <json> { say to-json($res); }
        default { say $res; }
    }
}


multi sub MAIN
#= Command given as a sequence of words.
(*@words,                                  #= Text to be questioned.
 Str :q(:$questions)!,                     #= Questions separated with '?' or ';'.
 Str :$llm is copy = 'Whatever',           #= Large Language Model, one of 'openai', 'palm', or 'Whatever'.
 UInt :mt(:$max-tokens) = 300,             #= The maximum number of tokens to generate in the completion.
 Real :temp(:$temperature) = 0.7,             #= Temperature.
 Str :r(:$request) = 'Whatever',           #= Request.
 Bool :p(:$pairs) = False,                 #= Should question-answer pairs be returned or not?
 Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use OpenAI API.)
 UInt :$timeout = 10,                      #= Timeout.
 Bool :$echo = False,                      #= Should the query, result, answer be echoed or not?
 Str :f(:$format) is copy = 'values',      #= Format of the result; one of "json", "hash", "values", or "Whatever".
 Str :$method is copy = 'tiny',            #= Method for the HTTP POST query; one of "tiny" or "curl".
 ) {
    my Str $text = @words.join(' ').Str;
    return llm-front($text, $questions, :$llm, :$max-tokens, :$temperature, :$request, :$pairs,
            :$auth-key, :$timeout, :$echo, :$format, :$method);
}
